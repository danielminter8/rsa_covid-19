{"version":3,"sources":["pages/home.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","latest","curveData","componentDidMount","axios","get","then","result","data","pop","setState","response","labels","stats","z","length","push","date","cases","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","displayData","div","className","style","width","Object","keys","values","this","marginTop","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yOAIqBA,E,4MACjBC,MAAQ,CACJC,OAAQ,GACRC,UAAU,I,EAEdC,kBAAoB,WAChBC,IAAMC,IAAI,qBACLC,MAAK,SAACC,GACH,IAAIC,EAAOD,EAAOC,KAAKA,KACvBA,EAAKC,MACL,EAAKC,SAAS,CAAET,OAAOO,OAE3BJ,IAAMC,IAAI,kBACTC,MAAK,SAACC,GAKH,IAJA,IAAII,EAAWJ,EAAOC,KAAKN,UAEvBU,EAAS,GACTC,EAAQ,GACJC,EAAI,EAAGA,EAAIH,EAASI,OAAOD,IAC/BF,EAAOI,KAAKL,EAASG,GAAGG,MACxBJ,EAAMG,KAAKL,EAASG,GAAGI,OAE3B,IAAIV,EAAO,CACPI,SACAO,SAAU,CACR,CACEC,MAAO,yBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChB7B,KAAMK,KAKd,EAAKH,SAAS,CAAER,UAAUM,Q,EAItC8B,YAAc,WAGV,IAHiB,IACZrC,EAAU,EAAKD,MAAfC,OACDsC,EAAM,GACFzB,EAAI,EAAGA,EAAIb,EAAOc,OAAQD,IAC9ByB,EAAIvB,KACA,yBAAKwB,UAAU,OAAOC,MAAO,CAACC,MAAO,UACnD,yBAAKF,UAAU,aACb,wBAAIA,UAAU,cAAcG,OAAOC,KAAK3C,EAAOa,KAE/C,uBAAG0B,UAAU,aAAaG,OAAOE,OAAO5C,EAAOa,QAO3C,OAAOyB,G,uDAQD,IAAD,EACoBO,KAAK9C,MAAzBC,EADA,EACAA,OAAOC,EADP,EACOA,UACZ,OAAGD,EAAOc,OAAS,EAEf,yBAAKyB,UAAU,aACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,aAAaC,MAAO,CAACM,UAAU,KAC7CD,KAAKR,gBAIN,yBAAKE,UAAU,MAAMC,MAAO,CAACM,UAAU,KACvC,kBAAC,IAAD,CAAMvC,KAAMN,MAMb,kC,GA/FmB8C,IAAMC,WCQzBC,MARf,WACE,OACM,6BACN,kBAAC,EAAD,QCKkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ceac6df5.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nexport default class Home extends React.Component {\r\n    state = {\r\n        latest: [],\r\n        curveData:[]\r\n    }\r\n    componentDidMount = () => {\r\n        axios.get('/api/covid/latest')\r\n            .then((result) => {\r\n                let data = result.data.data\r\n                data.pop()\r\n                this.setState({ latest:data })\r\n            })\r\n            axios.get('/api/covid/all')\r\n            .then((result) => {\r\n                let response = result.data.curveData                \r\n                \r\n                let labels = [];\r\n                let stats = [];\r\n                for(let z = 0; z < response.length;z++){\r\n                    labels.push(response[z].date)\r\n                    stats.push(response[z].cases)\r\n                }\r\n                let data = {\r\n                    labels,\r\n                    datasets: [\r\n                      {\r\n                        label: 'Total Cases Identified',\r\n                        fill: false,\r\n                        lineTension: 0.1,\r\n                        backgroundColor: 'rgba(75,192,192,0.4)',\r\n                        borderColor: 'rgba(75,192,192,1)',\r\n                        borderCapStyle: 'butt',\r\n                        borderDash: [],\r\n                        borderDashOffset: 0.0,\r\n                        borderJoinStyle: 'miter',\r\n                        pointBorderColor: 'rgba(75,192,192,1)',\r\n                        pointBackgroundColor: '#fff',\r\n                        pointBorderWidth: 1,\r\n                        pointHoverRadius: 5,\r\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                        pointHoverBorderWidth: 2,\r\n                        pointRadius: 1,\r\n                        pointHitRadius: 10,\r\n                        data: stats\r\n                      }\r\n                    ]\r\n                  };\r\n\r\n                this.setState({ curveData:data })\r\n            })\r\n    }\r\n\r\n    displayData = () => {\r\n        let {latest} = this.state\r\n        let div = [];\r\n        for(let z = 0; z < latest.length; z++){\r\n            div.push(\r\n                <div className=\"card\" style={{width: '18rem'}}>\r\n  <div className=\"card-body\">\r\n    <h5 className=\"card-title\">{Object.keys(latest[z])}</h5>\r\n    {/* <h6 className=\"card-subtitle mb-2 text-muted\">Card subtitle</h6> */}\r\n    <p className=\"card-text\">{Object.values(latest[z])}</p>\r\n    {/* <a href=\"#\" className=\"card-link\">Card link</a>\r\n    <a href=\"#\" className=\"card-link\">Another link</a> */}\r\n  </div>\r\n</div>\r\n            )\r\n        }\r\n        return div\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n    render() {\r\n        let {latest,curveData} = this.state;\r\n        if(latest.length > 0){\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row centered\">\r\n                <div className=\"card-group\" style={{marginTop:50}}>\r\n                {this.displayData()}\r\n                </div>\r\n                </div>\r\n\r\n                <div className=\"row\" style={{marginTop:15}}>\r\n                <Line data={curveData} />\r\n                </div>\r\n            \r\n            </div>\r\n        )\r\n    }else{\r\n        return <div></div>\r\n    }\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Home from './pages/home';\n\nfunction App() {\n  return (\n        <div>\n  <Home />\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}