{"version":3,"sources":["components/mapbox.jsx","components/dataset.js","pages/home.jsx","App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","MyMap","props","state","map","Map","container","style","center","zoom","scrollZoom","disable","dragPan","id","position","width","height","React","Component","dataset","returnData","cases","recoveries","deaths","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","Home","latest","curveData","componentDidMount","axios","get","then","result","pop","setState","response","labels","z","length","push","date","datasets","displayData","div","className","Object","keys","values","this","marginTop","options","scales","yAxes","ticks","beginAtZero","max","Math","ceil","Number","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a37c825.chunk.js","sourcesContent":["import mapboxgl from 'mapbox-gl/dist/mapbox-gl.js';\r\nimport React from 'react';\r\n\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW5jcmVkaWJsZWphZ3VyIiwiYSI6ImNrN3VyeXVybzE1OWEzbG1ybHFkNWcxNzMifQ.AybXTKikwd-8lr8TdbVyJQ';\r\n\r\nexport default class MyMap extends React.Component{\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n   \r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    const map = new mapboxgl.Map({\r\n      container: 'mymap',\r\n      style: 'mapbox://styles/incrediblejagur/ck7xs2kdu00ot1ilpid6krvs7',\r\n      center: [24.991639, -28.8166236],\r\n      zoom: 4.9\r\n    });\r\n    map.scrollZoom.disable();\r\n    map.dragPan.disable()\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div id='mymap' \r\n             style={{\r\n              position: 'absolute',\r\n              width: '100%',\r\n              height: '100%',\r\n              }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n","const dataset = {\r\n    returnData(cases,recoveries,deaths){\r\n        return([\r\n            {\r\n                label: 'Positive Cases Identified',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: 'rgba(232, 87, 77)',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(232, 87, 77)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: cases\r\n            },\r\n            {\r\n                label: 'Recoveries',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(75,192,192,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: recoveries\r\n            },\r\n            {\r\n                label: 'Deaths',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: 'rgba(0, 0, 0)',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(0, 0, 0)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: deaths\r\n            }\r\n        ]\r\n        )\r\n\r\n    }\r\n}\r\nexport default dataset;","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\nimport MyMap from '../components/mapbox';\r\nimport dataset from '../components/dataset';\r\n\r\nexport default class Home extends React.Component {\r\n    state = {\r\n        latest: [],\r\n        curveData: []\r\n    }\r\n    componentDidMount = () => {\r\n        axios.get('/api/covid/latest')\r\n            .then((result) => {\r\n                let data = result.data.data\r\n                data.pop()\r\n                this.setState({ latest: data })\r\n            })\r\n        axios.get('/api/covid/all')\r\n            .then((result) => {\r\n                let response = result.data.data\r\n\r\n                let labels = [];\r\n                let cases = [];\r\n                let recoveries = [];\r\n                let deaths = [];\r\n                for (let z = 0; z < response.length; z++) {\r\n                    labels.push(response[z].date)\r\n                    cases.push(response[z].cases)\r\n                    recoveries.push(response[z].recoveries)\r\n                    deaths.push(response[z].deaths)\r\n                }\r\n                let data = {\r\n                    labels,\r\n                    datasets: dataset.returnData(cases,recoveries,deaths)\r\n                };\r\n\r\n                this.setState({ curveData: data })\r\n            })\r\n    }\r\n\r\n    displayData = () => {\r\n        let { latest } = this.state\r\n        let div = [];\r\n        for (let z = 0; z < latest.length; z++) {\r\n            div.push(\r\n                <div className=\"card\" style={{ width: '18rem' }}>\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{Object.keys(latest[z])}</h5>\r\n                        {/* <h6 className=\"card-subtitle mb-2 text-muted\">Card subtitle</h6> */}\r\n                        <p className=\"card-text\">{Object.values(latest[z])}</p>\r\n                        {/* <a href=\"#\" className=\"card-link\">Card link</a>\r\n    <a href=\"#\" className=\"card-link\">Another link</a> */}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return div\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        let { latest, curveData } = this.state;\r\n        if (latest.length > 0) {\r\n            return (\r\n                <div>\r\n                <div className=\"container\">\r\n                    <div className=\"row centered\">\r\n                        <div className=\"card-group\" style={{ marginTop: 50 }}>\r\n                            {this.displayData()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\" style={{ marginTop: 15 }}>\r\n                        <Line data={curveData}\r\n                            options={{\r\n                                scales: {\r\n                                    yAxes: [{\r\n                                        ticks: {\r\n                                            beginAtZero: true,\r\n                                            max: Math.ceil((Number(Object.values(latest[1])) * 2.5) / 100) * 100\r\n                                        }\r\n                                    }]\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n    <div style={{ marginTop: 20 }}>\r\n    <MyMap />\r\n</div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div><MyMap /></div>\r\n        }\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Home from './pages/home';\n\nfunction App() {\n  return (\n        <div>\n  <Home />\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}